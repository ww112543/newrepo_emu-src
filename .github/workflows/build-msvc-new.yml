name: yuzu Build MSVC

on:
  workflow_call:
    inputs:
      runos:
        description: 'Running operating system. Which will change VS version.'
        type: string
        required: false
        default: 'windows-latest'
      simd:
        description: 'Compiler instruction set. Can be avx, avx2.'
        type: string
        required: false
        default: ''
      GL:
        description: 'Enables whole program optimization.This will enable LTCG.'
        type: boolean
        required: false
        default: false
      contract-fp:
        description: 'Allows the compiler to generate floating-point contractions.'
        type: boolean
        required: false
        default: false
      type-fp:
        description: 'Type of floating-point behavior.Can be default, fast(unsafe), precise, strict'
        type: string
        required: false
        default: 'default'

  workflow_dispatch:
    inputs:
      runos:
        description: 'Running operating system. Which will change VS version.'
        type: choice
        required: false
        options:
        - windows-latest
        - windows-2019
      simd:
        description: 'Compiler instruction set. Can be avx, avx2.'
        type: string
        required: false
        default: ''
      GL:
        description: 'Enables whole program optimization.This will enable LTCG.'
        type: boolean
        required: false
        default: false
      contract-fp:
        description: 'Allows the compiler to generate floating-point contractions.'
        type: boolean
        required: false
        default: false
      type-fp:
        description: 'Type of floating-point behavior.Can be default, fast(unsafe), precise, strict'
        type: string
        required: false
        default: 'default'

jobs:
  build:
    name: Building yuzu Binaries with MSVC
    runs-on: ${{ (inputs || github.event.inputs).runos }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: actions/checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      #Generate submodules list
      - name: Generate submodules list
        run: |
          git submodule > modulehash.txt && echo Completed
          echo Completed
        shell: cmd

      #Making directory
      - name: Making directory
        run: |
          echo Making directory
          mkdir build
        shell: pwsh

      #Set short SHA
      - name: Set short SHA outputs
        run: echo GITREV=$(git rev-parse --short HEAD) >> $env:GITHUB_ENV
        shell: pwsh

      #Setup vcpkg
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 'cbf56573a987527b39272e88cbdd11389b78c6e4'
          runVcpkgInstall: false
          vcpkgJsonGlob: './vcpkg.json'

      #Install Vulkan SDK
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: SPIRV-Tools, Glslang
          vulkan-use-cache: true

      #Install CMake
      - name: Install CMake
        uses: lukka/get-cmake@latest

      #Adding MSBuild
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      #Building with CMake and Ninja
      - name: Generating Project using CMake and Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      #Set extansion compiler arguments
      - name: Set extansion compiler arguments
#       if: ${{ (inputs || github.event.inputs).simd != '' }}
        run: |
          os=${{ (inputs || github.event.inputs).runos }}
          simd=${{ (inputs || github.event.inputs).simd }}
          gl=${{ (inputs || github.event.inputs).GL }}
          fpc=${{ (inputs || github.event.inputs).contract-fp }}
          fpt=${{ (inputs || github.event.inputs).type-fp }}
          comp_args_cxx="/DWIN32 /D_WINDOWS /GR /EHsc /Gw /Ob3 "
          cmake_args="-G "
          bsuffix=""
          if [ "$os" == "windows-latest" ]
          then
              cmake_args=$cmake_args'"Visual Studio 17 2022"'
              bsuffix=$bsuffix"-vs2022"
          elif [ "$os" == "windows-2019" ]
          then
              cmake_args=$cmake_args'"Visual Studio 16 2019"'
              bsuffix=$bsuffix"-vs2019"
          fi
          if [ "$gl" == "True" ] || [ "$gl" == "true" ]
          then
              comp_args_cxx=$comp_args_cxx"/GL "
          fi
          if [ "$fpc" == "True" ] || [ "$fpc" == "true" ] && [ "$os" == "windows-latest" ]
          then
              comp_args_cxx=$comp_args_cxx"/fp:contract "
          fi
          if [ "$fpt" == "fast" ]
          then
              comp_args_cxx=$comp_args_cxx"/fp:fast "
          elif [ "$fpt" == "precise" ]
          then
              comp_args_cxx=$comp_args_cxx"/fp:precise "
          elif [ "$fpt" == "strict" ]
          then
              comp_args_cxx=$comp_args_cxx"/fp:strict "
          fi
          if [ "$simd" = "AVX" ] || [ "$simd" = "avx" ]
          then
              comp_args_cxx=$comp_args_cxx"/arch:AVX "
              bsuffix=$bsuffix"-avx"
          elif [ "$simd" = "AVX2" ] || [ "$simd" = "avx2" ]
          then
              comp_args_cxx=$comp_args_cxx"/arch:AVX2 "
              bsuffix=$bsuffix"-avx2"
          elif [ "$simd" = "" ]
          then
              echo ''
          else
              echo 'Unknown instruction set' $simd
          fi
          echo 'build-gen='$cmake_args >> $GITHUB_ENV
          echo 'build-arg-ext=-DCMAKE_CXX_FLAGS="'$comp_args_cxx'"' >> $GITHUB_ENV
          echo 'simd-suffix='$bsuffix >> $GITHUB_ENV
        shell: bash

      #Preparing Build
      - name: Before Build
        env:
          build-arg: -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_POLICY_DEFAULT_CMP0069=NEW -DYUZU_ENABLE_LTO=ON -DUSE_EXTERNAL_VCPKG=ON -DYUZU_USE_BUNDLED_VCPKG=OFF -DYUZU_USE_BUNDLED_QT=1 -DYUZU_USE_BUNDLED_SDL2=1 -DYUZU_USE_QT_WEB_ENGINE=ON -DYUZU_TESTS=OFF -DUSE_DISCORD_PRESENCE=ON -DTITLE_BAR_FORMAT_IDLE="yuzu Early Access ${{ github.ref_name }}-${{ env.GITREV }}" -DTITLE_BAR_FORMAT_RUNNING="yuzu Early Access ${{ github.ref_name }}-${{ env.GITREV }} | {3}" -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=OFF -DENABLE_QT_TRANSLATION=ON -DCMAKE_BUILD_TYPE=Release
        run: |
          cd build && echo Build
          echo Build
          cmake --version
          cmake .. ${{ env.build-gen }} ${{ env.build-arg }} ${{ env.build-arg-ext }}
        shell: pwsh

      #Build the .sln
      - name: Build app for release
        run: msbuild build\yuzu.sln /t:yuzu /p:WarningLevel=0 /p:Configuration=Release

      - name: After Build
        run: |
          mkdir ${{ github.workspace }}\build\bin\yuzu-build\yuzu-${{ env.GITREV }}-msvc
          mv ${{ github.workspace }}\build\bin\Release\* ${{ github.workspace }}\build\bin\yuzu-build\yuzu-${{ env.GITREV }}-msvc
          del ${{ github.workspace }}\build\bin\yuzu-build\yuzu-${{ env.GITREV }}-msvc\*.pdb
        shell: pwsh

      - name: Compress the Build Folder
        run: |
          7z a -t7z "yuzu-ea-${{ github.ref_name }}-${{ env.GITREV }}-msvc-exe${{ env.simd-suffix }}.7z" -m0=lzma2:d=64m -mx=9 -aoa -mfb=64 -md=32m -ms=on ".\build\bin\yuzu-build\*\*.exe"
          7z a -t7z "yuzu-ea-${{ github.ref_name }}-${{ env.GITREV }}-msvc${{ env.simd-suffix }}.7z" -m0=lzma2:d=64m -mx=9 -aoa -mfb=64 -md=32m -ms=on "${{ github.workspace }}\build\bin\yuzu-build"
        shell: pwsh
          
      #Upload Artifacts
      - name: Making artifact
        uses: actions/upload-artifact@v3
        with:
          name: yuzu-ea-${{ env.GITREV }}-msvc${{ env.simd-suffix }}
          path: yuzu-ea-${{ github.ref_name }}-${{ env.GITREV }}-msvc${{ env.simd-suffix }}.7z
          retention-days: 7

      - name: Making exe artifact
        uses: actions/upload-artifact@v3
        with:
          name: yuzu-ea-${{ env.GITREV }}-msvc-exe${{ env.simd-suffix }}
          path: yuzu-ea-${{ github.ref_name }}-${{ env.GITREV }}-msvc-exe${{ env.simd-suffix }}.7z
          retention-days: 7

#     #Publishing to Release
#     - name: Release to GitHub Releases
#       uses: softprops/action-gh-release@v1
#       with:
#         name: EA${{ github.event.head_commit.message }}
#         tag_name: EA${{ github.event.head_commit.message }}
#         body: "Yuzu Early Access CI Builds with Github Actions [Current Build: yuzu Early Access ${{ github.event.head_commit.message }}]"
#         files: ${{ github.workspace }}\yuzu-early-access-EA${{ github.event.head_commit.message }}.zip
