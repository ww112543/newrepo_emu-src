name: yuzu Build MSVC (cache)

on:
  workflow_call:
    inputs:
      runos:
        description: 'Running operating system. Which will change VS version.'
        type: string
        required: false
        default: 'windows-latest'
      simd:
        description: 'Compiler instruction set. Can be avx, avx2.'
        type: string
        required: false
        default: ''
      GL:
        description: 'Enables whole program optimization.This will enable LTCG.'
        type: boolean
        required: false
        default: false
      contract-fp:
        description: 'Allows the compiler to generate floating-point contractions.'
        type: boolean
        required: false
        default: false
      type-fp:
        description: 'Type of floating-point behavior.Can be default, fast(unsafe), precise, strict'
        type: string
        required: false
        default: 'default'
      cache:
        description: 'Weather to use buildcache.'
        type: boolean
        required: false
        default: true
      suffix:
        description: 'Build suffix.'
        type: string
        required: false
        default: ''

  workflow_dispatch:
    inputs:
      runos:
        description: 'Running operating system. Which will change VS version.'
        type: choice
        required: false
        options:
        - windows-latest
        - windows-2019
      simd:
        description: 'Compiler instruction set. Can be avx, avx2.'
        type: string
        required: false
        default: ''
      GL:
        description: 'Enables whole program optimization.This will enable LTCG.'
        type: boolean
        required: false
        default: false
      contract-fp:
        description: 'Allows the compiler to generate floating-point contractions.'
        type: boolean
        required: false
        default: false
      type-fp:
        description: 'Type of floating-point behavior.Can be default, fast(unsafe), precise, strict'
        type: string
        required: false
        default: 'default'
      cache:
        description: 'Weather to use buildcache.'
        type: boolean
        required: false
        default: true
      suffix:
        description: 'Build suffix.'
        type: string
        required: false
        default: ''

jobs:
  build:
    name: Building yuzu Binaries with MSVC (cache)
    runs-on: ${{ (inputs || github.event.inputs).runos }}
    env:
      build-suffix: ${{ (inputs || github.event.inputs).suffix }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: actions/checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      #Generate submodules list
      - name: Generate submodules list
        run: |
          git submodule > modulehash.txt && echo Completed
          echo Completed
        shell: cmd

      #Set short SHA
      - name: Set short SHA outputs
        id: vars
        run: echo GITREV=$(git rev-parse --short HEAD) >> $env:GITHUB_ENV
        shell: pwsh

      #Setup vcpkg
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '656fcc6ab2b05c6d999b7eaca717027ac3738f71'
          runVcpkgInstall: false
          vcpkgJsonGlob: './vcpkg.json'
          appendedCacheKey: ${{ (inputs || github.event.inputs).runos }}-vcpkg-msvc

      #Install Vulkan SDK
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers, Glslang
          vulkan-use-cache: true

      #Install CMake
      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1

      #Set extansion compiler arguments
      - name: Set extansion compiler arguments
#       if: ${{ (inputs || github.event.inputs).simd != '' }}
        run: |
          os=${{ (inputs || github.event.inputs).runos }}
          simd=${{ (inputs || github.event.inputs).simd }}
          gl=${{ (inputs || github.event.inputs).GL }}
          fpc=${{ (inputs || github.event.inputs).contract-fp }}
          fpt=${{ (inputs || github.event.inputs).type-fp }}
          comp_args_cxx="/DWIN32 /D_WINDOWS /GR /EHsc /Gw /GA /Gr /Ob3 "
          cmake_args="-GNinja"
          bsuffix=""
          if [ "$os" == "windows-latest" ]
          then
              bsuffix=$bsuffix"-vs2022"
          elif [ "$os" == "windows-2019" ]
          then
              bsuffix=$bsuffix"-vs2019"
          fi
          if [ "$gl" == "True" ] || [ "$gl" == "true" ]
          then
              comp_args_cxx=$comp_args_cxx"/GL "
          fi
          if [ "$fpc" == "True" ] || [ "$fpc" == "true" ] && [ "$os" == "windows-latest" ]
          then
              comp_args_cxx=$comp_args_cxx"/fp:contract "
          fi
          if [ "$fpt" == "fast" ]
          then
              comp_args_cxx=$comp_args_cxx"/fp:fast "
          elif [ "$fpt" == "precise" ]
          then
              comp_args_cxx=$comp_args_cxx"/fp:precise "
          elif [ "$fpt" == "strict" ]
          then
              comp_args_cxx=$comp_args_cxx"/fp:strict "
          fi
          if [ "$simd" = "AVX" ] || [ "$simd" = "avx" ]
          then
              comp_args_cxx=$comp_args_cxx"/arch:AVX "
          elif [ "$simd" = "AVX2" ] || [ "$simd" = "avx2" ]
          then
              comp_args_cxx=$comp_args_cxx"/arch:AVX2 "
          elif [ "$simd" = "" ]
          then
              echo ''
          else
              echo 'Unknown instruction set' $simd
          fi
          echo 'build-gen='$cmake_args >> $GITHUB_ENV
          echo 'build-arg-ext=-DCMAKE_CXX_FLAGS="'$comp_args_cxx'"' >> $GITHUB_ENV
          echo 'build-suffix=${{ env.build-suffix }}'$bsuffix >> $GITHUB_ENV
        shell: bash
        
      - name: Set up cache
        if: ${{ (inputs || github.event.inputs).cache != false }}
        uses: actions/cache@v3
        with:
          path: ~/.buildcache
          key: ${{ runner.os }}-${{ env.build-suffix }}-msvc-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.build-suffix }}-msvc-

      - name: Install buildcache
        run: |
          set PATH=%PATH%;C:\WINDOWS\System32
          choco install wget
          call refreshenv
          wget https://github.com/mbitsnbites/buildcache/releases/download/v0.27.6/buildcache-windows.zip
          7z x buildcache-windows.zip
          copy buildcache\bin\buildcache.exe C:\ProgramData\chocolatey\bin
          rmdir buildcache
          echo %PATH% >> %GITHUB_PATH%
        shell: cmd

      #Preparing Build
      - name: Before Build
        env:
          build-arg: -DCMAKE_TOOLCHAIN_FILE=".github/cmake/MSVCCache.cmake" -DCMAKE_POLICY_DEFAULT_CMP0069=NEW -DYUZU_ENABLE_LTO=ON -DUSE_CCACHE=ON -DUSE_EXTERNAL_VCPKG=ON -DYUZU_USE_BUNDLED_VCPKG=OFF -DYUZU_USE_BUNDLED_QT=1 -DYUZU_USE_BUNDLED_SDL2=1 -DYUZU_USE_QT_WEB_ENGINE=ON -DYUZU_TESTS=OFF -DUSE_DISCORD_PRESENCE=ON -DTITLE_BAR_FORMAT_IDLE="yuzu Early Access ${{ github.ref_name }}-${{ env.GITREV }}" -DTITLE_BAR_FORMAT_RUNNING="yuzu Early Access ${{ github.ref_name }}-${{ env.GITREV }} | {3}" -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=OFF -DENABLE_QT_TRANSLATION=ON -DCMAKE_BUILD_TYPE=Release
          CC: cl.exe
          CXX: cl.exe
        run: |
          mkdir build && cd build
          cmake --version
          cmake .. ${{ env.build-gen }} ${{ env.build-arg }} ${{ env.build-arg-ext }}

      #Build the .sln
      - name: Build app for release
        run: |
          cmake --build build
        shell: cmd

      - name: After Build
        run: |
          buildcache -s
          mkdir ${{ github.workspace }}\build\bin\yuzu-build\yuzu-${{ env.GITREV }}-msvc
          mv ${{ github.workspace }}\build\bin\*.* ${{ github.workspace }}\build\bin\Release
          mv ${{ github.workspace }}\build\bin\Release\* ${{ github.workspace }}\build\bin\yuzu-build\yuzu-${{ env.GITREV }}-msvc
          del ${{ github.workspace }}\build\bin\yuzu-build\yuzu-${{ env.GITREV }}-msvc\*.pdb
        shell: pwsh

      - name: Compress the Build Folder
        run: |
          7z a -t7z "yuzu-ea-${{ github.ref_name }}-${{ env.GITREV }}-msvc${{ env.build-suffix }}.7z" -m0=lzma2:d=64m -mx=9 -aoa -mfb=64 -md=32m -ms=on "${{ github.workspace }}\build\bin\yuzu-build"
        shell: pwsh
          
      #Upload Artifacts
      - name: Making artifact
        uses: actions/upload-artifact@v3
        with:
          name: yuzu-ea-${{ env.GITREV }}-msvc${{ env.build-suffix }}
          path: yuzu-ea-${{ github.ref_name }}-${{ env.GITREV }}-msvc${{ env.build-suffix }}.7z
          retention-days: 7
